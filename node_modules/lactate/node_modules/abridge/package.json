{
  "name": "abridge",
  "version": "0.4.0",
  "description": "Streaming CSS / JS minifier",
  "author": {
    "name": "Weltschmerz"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/Weltschmerz/Abridge.git"
  },
  "dependencies": {
    "suckle": "latest",
    "should": "1.2.0"
  },
  "scripts": {},
  "readme": "# Abridge\n\n`npm install abridge`\n\nAbridge is a wild fork of [node-minify](https://github.com/srod/node-minify) module. It is not a drop-in replacement, but improves upon the original code in various ways.\n\n* Dropped support for Google Closure\n* Dropped no-minify file concat\n* Do not create temporary files, pipe to chld process's stdin instead\n* Use streams wherever possible\n* Supply minified data to callbacks\n* Major API improvements\n\n# Usage\n\nThe old API style is mostly preserved.\n\n```js\nvar Minifier = require('abridge').Minifier;\n\nvar minifier = new Minifier({\n    type: 'yui',\n    fileIn: 'public/js/base.js',\n    fileOut: 'public/js/base-min.js',\n    callback: function(err){\n        console.log(err);\n    }\n});\n\nminifier.compress();\n```\n\nBut now we can just call the `minify` function without creating an instance of Minify:\n\n```js\nvar abridge = require('abridge');\nvar options = {\n    type: 'yui',\n    fileIn: 'public/js/base.js',\n    fileOut: 'public/js/base-min.js',\n    callback: function(err){\n        console.log(err);\n    }\n};\n\nabridge.minify(options);\n```\n\nWe can also supply a callback as a second argument, as per tradition:\n\n```js\nvar options = {\n    type: 'yui',\n    fileIn: 'public/js/base.js',\n    fileOut: 'public/js/base-min.js'\n};\n\nabridge.minify(options, function(err) {\n    console.log(err);\n});\n```\n\nAnd our callback is given the minified data:\n\n```js\nabridge.minify(options, function(err, data) {\n    console.log(err, data);\n});\n```\n\nAlso `fileOut` and `type` are optional. If CSS is detected, Abridge will default to YUICompressor, as uglifyjs compresses only JavaScript. However, if minifying JavaScript, Abridge will use Uglify-js instead, as it is more efficient:\n\n```js\nvar options = {\n    fileIn: 'public/js/base.js'\n};\n\nabridge.minify(options, console.log);\n```\n\nIn fact you no longer need an options object:\n\n```js\nvar fileIn = ['public/js/base.js', 'public/js/somn.js'];\nvar fileOut = 'public/js/common.js';\nabridge.minify(fileIn, fileOut, console.log);\n```\n\nIn the simplest case, we have:\n\n```js\nabridge.minify('public/js/base.js', function(err, data) {\n\n});\n```\n\nThe function also returns a pipeable Stream instance:\n\n```js\nvar http = require('http');\nvar server = new http.Server();\n\nserver.addListener('request', function(req, res) {\n    var url = req.url;\n    if (/^\\/files/.test(url)) {\n       url = url.substring(1);\n       abridge.minify(url).pipe(res);\n    };\n});\n```\n\nBut this would be absurdly inefficient without file caching. See [Lactate](https://github.com/Weltschmerz/Lactate) for that.\n\n## Note\n\nTo use YUICompressor (default for CSS files) you must have Java installed.\n",
  "_id": "abridge@0.4.0",
  "dist": {
    "shasum": "534ddab7a3defe9fbccdcb706838148e4f639951"
  },
  "_from": "abridge@latest"
}
