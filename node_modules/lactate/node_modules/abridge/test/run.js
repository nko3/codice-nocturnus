
var Test = require('./Test');
var abridge = require('../lib/abridge');
var should = require('should');
var Stream = require('stream').Stream;
var fs = require('fs');

;(function runTests() {

  var test = new Test();

  const fileIn = __dirname + '/style.css';
  const fileOut = __dirname + '/out.css';
  const size = 60;

  test
  .describe('#minify(object, callback)', function(done) {
    const options = { fileIn: fileIn };
    var stream = abridge.minify(options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(object, callback) --with-fileOut', function(done) {
    const options = { fileIn: fileIn, fileOut:fileOut };
    var stream = abridge.minify(options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(object, callback) --with-encoding', function(done) {
    const options = { fileIn: fileIn, fileOut:fileOut, encoding: 'utf8' };
    var stream = abridge.minify(options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.a('string');
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(object, callback) --with-type', function(done) {
    const options = { fileIn: fileIn, fileOut:fileOut, type: 'yui' };
    var stream = abridge.minify(options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(object, callback) --with-bufferSize', function(done) {
    const options = { fileIn: fileIn, fileOut:fileOut, bufferSize: 64 * 1024 };
    var stream = abridge.minify(options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(object, fileOut, callback)', function(done) {
    const options = { fileIn: fileIn };
    var stream = abridge.minify(options, fileOut, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(string, callback)', function(done) {
    var stream = abridge.minify(fileIn, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(string, options, callback)', function(done) {
    var options = {};
    var stream = abridge.minify(fileIn, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(string, options, callback) --with-fileOut', function(done) {
    var options = { fileOut: fileOut };
    var stream = abridge.minify(fileIn, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(string, options, callback) --with-encoding', function(done) {
    var options = { encoding:'utf8' };
    var stream = abridge.minify(fileIn, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.a('string');
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(string, options, callback) --with-type', function(done) {
    var options = { type:'yui' };
    var stream = abridge.minify(fileIn, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(string, options, callback) --with-bufferSize', function(done) {
    var options = { bufferSize:1024 * 64 };
    var stream = abridge.minify(fileIn, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(string, fileOut, callback)', function(done) {
    var stream = abridge.minify(fileIn, fileOut, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(array, callback)', function(done) {
    var stream = abridge.minify([fileIn, fileIn], function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size * 2);
      done();
    });
  })
  .describe('#minify(array, options, callback)', function(done) {
    var options = {};
    var stream = abridge.minify([fileIn, fileIn], options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size * 2);
      done();
    });
  })
  .describe('#minify(array, options, callback) --with-fileOut', function(done) {
    var options = { fileOut: fileOut };
    var stream = abridge.minify([fileIn, fileIn], options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size * 2);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(array, options, callback) --with-encoding', function(done) {
    var options = { encoding:'utf8' };
    var stream = abridge.minify([fileIn, fileIn], options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.a('string');
      data.should.have.property('length', size * 2);
      done();
    });
  })
  .describe('#minify(array, options, callback) --with-type', function(done) {
    var options = { type:'yui' };
    var stream = abridge.minify([fileIn, fileIn], options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size * 2);
      done();
    });
  })
  .describe('#minify(array, options, callback) --with-bufferSize', function(done) {
    var options = { bufferSize:1024 * 64 };
    var stream = abridge.minify([fileIn, fileIn], options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size * 2);
      done();
    });
  })
  .describe('#minify(array, fileOut, callback)', function(done) {
    var stream = abridge.minify([fileIn, fileIn], fileOut, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size * 2);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(stream, callback)', function(done) {
    var rs = fs.createReadStream(fileIn);
    var stream = abridge.minify(rs, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(stream, options, callback)', function(done) {
    var rs = fs.createReadStream(fileIn);
    var options = {};
    var stream = abridge.minify(rs, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(stream, options, callback) --with-fileOut', function(done) {
    var rs = fs.createReadStream(fileIn);
    var options = { fileOut: fileOut };
    var stream = abridge.minify(rs, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .describe('#minify(stream, options, callback) --with-encoding', function(done) {
    var rs = fs.createReadStream(fileIn);
    var options = { encoding: 'utf8' };
    var stream = abridge.minify(rs, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.a('string');
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(stream, options, callback) --with-type', function(done) {
    var rs = fs.createReadStream(fileIn);
    var options = { type: 'yui' };
    var stream = abridge.minify(rs, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(stream, options, callback) --with-bufferSize', function(done) {
    var rs = fs.createReadStream(fileIn);
    var options = { bufferSize: 64 * 1024 };
    var stream = abridge.minify(rs, options, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      done();
    });
  })
  .describe('#minify(stream, fileOut, callback)', function(done) {
    var rs = fs.createReadStream(fileIn);
    var stream = abridge.minify(rs, fileOut, function(err, data) {
      should.not.exist(err);
      should.exist(data);
      stream.should.be.an.instanceof(Stream);
      data.should.be.an.instanceof(Buffer);
      data.should.have.property('length', size);
      fs.unlink(fileOut, done);
    });
  })
  .init();

})();
