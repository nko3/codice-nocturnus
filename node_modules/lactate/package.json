{
  "name": "lactate",
  "version": "0.12.2",
  "description": "Simple and featureful assets server",
  "keywords": [
    "static",
    "file",
    "server",
    "assets",
    "cache"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Weltschmerz/Lactate.git"
  },
  "author": {
    "name": "Weltschmerz",
    "email": "chlavois@gmail.com"
  },
  "dependencies": {
    "mime": "1.2.7",
    "suckle": "latest",
    "expire": "latest",
    "abridge": "latest",
    "fraction": "latest",
    "optimist": "0.3.5",
    "redis": "0.8.1"
  },
  "devDependencies": {
    "mocha": "1.6.0",
    "should": "1.2.0"
  },
  "main": "index.js",
  "bin": {
    "lactate": "bin/lactate"
  },
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "readme": "# Lactate\n\n`npm install -g lactate`\n\nAn exceedingly fast static file handler, with a few electives.\n\n### Features\n\n* In-memory caching\n* Redis caching\n* Robust cache-control setting\n* Automatic gzipping\n* Automatic minification\n* Custom 404 pages\n* Custom response headers\n* Asset bundling and minification\n* Middleware export\n* Default error pages\n* on(status) listeners\n* Colored log output\n* Global executable\n* Directory indexing\n* Express.static API compatibility\n* node-static API compatibility\n\n## Using Lactate\n\n### Global executable\n\nIf installed globally with `npm install -g lactate`, you will have the `lactate` command at your disposal. This will run lactate static file server in the current working directory, utilizing the `cluster` module for multiple CPU cores. All [options](https://github.com/Weltschmerz/Lactate#options) are available.\n\n```code\n$ lactate --help\nUsage: lactate [options]\n\nOptions:\n--root, -r                    Local path                          [default: \"\"]\n--from, -f                    Public path                         [default: \"\"]\n--subdirs, -s                 Serve subdirectories                [default: true]\n--hidden, -h                  Serve hidden files                  [default: false]\n--error_pages, --error-pages  Serve error pages                   [default: true]\n--autoindex, -a               Automatically index directories     [default: true]\n--cache, -c                   Store assets in-memory              [default: true]\n--redis_cache, --rc           Store assets in-memory using Redis  [default: true]\n--watch_files, --watch-files  Watch files for cache update        [default: true]\n--max_age, --max-age, -M      Client-side caching max-age         [default: 172800]\n--gzip, -g                    Gzip text assets                    [default: true]\n--minify, -m                  Minify text assets                  [default: false]\n--bundle, -b                  Bundle text assets                  [default: false]\n--rebundle, --rb              Rebundle assets if modified         [default: true]\n--headers, -H                 Custom response headers             [default: \"\"]\n--debug, -d                   Log HTTP info                       [default: true]\n--quiet, -q                   Prevent all log output              [default: false]\n\n```\n\n### Programmatic lactating\n\nLactate can be used with either plain node, or with Express. With Express, Lactate is a drop-in replacement for `static` middleware, but with far more ability. The examples below use Express 2.x API for simplicity. See the [examples](https://github.com/Weltschmerz/Lactate/tree/master/example) for various examples.\n\n```js\nvar lactate = require('lactate');\nvar express = require('express');\n\nvar app = express.createServer();\napp.use(lactate.static(__dirname + '/files'));\n```\n\n## Testing Lactate\n\nIf installed locally (without -g flag to npm install):\n\n1. `cd` into `~/node_modules/lactate`\n2. `npm install ./` to install devDependencies\n3. `make test` to run mocha test\n\n##The varieties of Lactate experience\n\n###Creating a Lactate server\n\n```js\nvar lactate = require('lactate'); \nvar options = {root:'files'}; \nvar server = lactate.createServer(options); \n\nserver.listen(8080);\n```\n\n###Creating a directory handler\n\n```js\nvar lactate = require('lactate');\nvar options = {from:'public/path/to/files'};\nvar files = lactate.dir('files', options);\n\nvar http = require('http');\nvar server = new http.Server;\n\nserver.addListener('request', function(req, res) {\n  files.serve(req, res);\n});\n\nserver.listen(8080);\n```\n\n###Using directory middleware\n\n```js\nvar lactate = require('lactate');\nvar files = lactate.dir('files', options);\n\nvar http = require('http');\nvar server = new http.Server;\n\nserver.addListener('request', files.toMiddleware());\nserver.listen(8080);\n```\n\n###Integrating with Express\n\n```js\nvar lactate = require('lactate');\nvar files = lactate.dir('files', options);\n\nvar express = require('express');\nvar app = express();\n\napp.use(files.toMiddleware());\napp.listen(8080);\n```\n\n###Using Express.static API\n\n```js\nvar lactate = require('lactate');\nvar express = require('express');\nvar app = express();\n\napp.use(lactate.static(__dirname + '/files'));\napp.listen(8000);\n```\n\n###Using node-static API\n\n```js\nvar lactate = require('lactate');\nvar files = new(lactate.Server)('./files');\n\nvar http = require('http');\nvar server = new http.Server;\n\n// You could also pass a .toMiddleware()'d function\n\nserver.addListener('request', function(req, res) {\n  files.serve(req, res);\n});\n\nserver.listen(8000);\n```\n\n###Serving individual files\n\n```js\nvar lactate = require('lactate');\n\nvar fileOptions = {from:'public/directory'};\nvar files = lactate.dir('files', fileOptions);\n\nvar pageOptions = {};\nvar pages = lactate.dir('pages');\n\nvar http = require('http');\nvar server = new http.Server;\n\nserver.addListener('request', function(req, res) {\n  if (req.url === '/') {\n    pages.serve('index.html', req, res);\n  } else {\n    files.serve(req, res);\n  };\n});\n```\n\n###Setting options\n\n```js\nvar lactate = require('lactate');\n\nvar fileOptions = {\n  from:'public'\n};\n\nvar files = lactate.dir('files', fileOptions);\n\nfiles.set('cache', false);\nfiles.disable('gzip');\nfiles.maxAge('ten days');\n\nvar express = require('express');\nvar app = express():\n  \napp.get('/public/*', files.toMiddleware());\napp.listen(8080);\n```\n\n###Bundling assets\n\n```js\nvar lactate = require('lactate');\nvar options = {\n  from:'files'\n};\n\nvar files = lactate.dir('files', options);\n\n// Combine and minify all scripts to 'common.js'\nfiles.bundle('js', 'common.js', function(err, data) {\n// Handle errors\n});\n\n// Combine and minify all CSS to 'common.css'\nfiles.bundleCSS('common.css');\n\nvar express = require('express');\nvar app = express();\n\napp.use(files.toMiddleware());\napp.listen(8000);\n```\n\n###Using custom 404 pages\n\n```js\nvar lactate = require('lactate');\nvar files = lactate.dir('files');\n\nfiles.notFound('path/to/404/page.html');\n\nfiles.notFound(function(req, res) {\n  res.writeHead(404);\n  res.end('Woops, 404');\n});\n\nvar express = require('express');\nvar app = express();\n\napp.use(files.toMiddleware());\napp.listen(8000);\n```\n\n###Using custom response headers\n\n```js\nvar lactate = require('lactate');\nvar files = lactate.dir('files');\n\nfiles.setHeader('x-powered-by', 'Lactate');\nfiles.header('x-timestamp', function(req, res) {\n  return new Date().toUTCString();\n});\n\nvar headers = {};\nfiles.headers(headers);\n```\n\n###Status listeners\n\nLactate extends EventEmitter for emitting status code events. Codes Lactate is aware of are:\n\n* `200` *OK*\n* `304` *Not Modified*\n* `400` *Bad Request*\n* `403` *Forbidden*\n* `404` *Not Found*\n* `405` *Method Not Allowed*\n* `500` *Internal Error*\n\nCallbacks are given an object which has the following properties:\n\n* `url` The requested URL\n* `method` The request method (GET, HEAD)\n* `headers` Request headers\n* `address` Request IP address\n* `port` Request port\n* `path` Absolute file path to the requested file, if it exists\n* `msg` HTTP satus message\n\n```js\nvar files = lactate.dir('files', {});\nfiles.on('404', function(req) {\n  console.log('404', req.url);\n});\n```\n\n##Options\n\n### Setting options\n\nBoolean options may be set using `enable` and `disable` methods. Other options may be set using `set` method with either key/value or an options object.\n\n**Passing to initialization function**\n\n```js\nvar lactate = require('lactate').Lactate({\n  max_age:'two days'\n})\n```\n\n**Using `set` method**\n\n```js\nlactate.set('hidden', true)\n```\n\n**Using enable/disable:**\n\n```js\nlactate.disable('gzip');\nlactate.enable('minify');\n```\n\n**Special options methods**\n\nLactate has some special methods to reduce visual clutter:\n\n```js\nlactate.maxAge('two days');\n```\n\nis equivalent to:\n\n```js\nlactate.set('max_age', 'two days');\n```\n\nSimilarly, the `headers` method is for setting custom response headers. \n\n**Underscores or spaces**\n\nUse spaces instead of underscores if you prefer:\n\n```js\nlactate.disable('max age');\nlactate.enable('watch files');\n```\n\n### Options available\n\n+ `root` **string**\n\nLocal directory from which to serve files. By default, the current working directory.\n\n+ `from` **string**\n\nPublic directory exposed to clients. If set, only requests from /*directory* will complete. Contrast this with the `root` option which is the location of files on the serving machine, not necessarily the requested path.\n\n+ `subdirs` **boolean**\n\nBy default subdirectories are served. To disable this, set `subdirs` to false.\n\n+ `hidden` **boolean**\n\nWhether or not to serve hidden files. Default is false.\n\n+ `error pages` **boolean**\n\nEnabled by default. When disabled, Lactate will not serve error pages for 404 resposes, etc..\n\n+ `autoindex` **boolean**\n\nAutomatically display directory indexes. Disabled by default.\n\n+ `cache` **boolean** or **object**\n\nKeep files in-memory. Enabled by default. For caching options and more information about caching strategy, see [Caching Options](https://github.com/Weltschmerz/Lactate#caching-options).\n\n+ `gzip` **boolean**\n\nIf false, disables automatic gzipping for text files (HTML, JS, CSS). Enabled by default.\n\n+ `minify` **boolean**\n\nIf true, will automatically minify JavaScript and CSS using [Abridge](https://github.com/Weltschmerz/Abridge). Disabled by default.\n\n+ `watch files` **boolean**\n\nDetermines whether Lactate will watch files to update its cache. If this is disabled, then your file cache will not update automatically as files are modified on the server.\n\n+ `headers` **object** or **function**\n\nSets custom response headers. If the option value is a function, it is a callback which is give (req, res) arguments. This function should return the header value; it is a mapping function.\n\n+ `max age` **number** or **string**\n\nPass this function a number (of seconds) or a string and appropriate headers will be set for client-side caching. Lactate comes with expiration defaults, such as 'two days' or '5 years and sixteen days' See [Expire](https://github.com/Weltschmerz/Expire) for details.\n\n```js\nlactate.set('max_age', 87500)\n//87500 seconds\nlactate.set('max_age', 'two days')\n//172800 seconds\nlactate.set'max_age', 'five weeks and one minute and ten seconds')\n//3024070 seconds\nlactate.set('max_age', 'one year and 2 months and seven weeks and 16 seconds')\n//41050028 seconds\n```\n\n+ `not found` **string** or **function**\n\nFor custom 404 handling. Functions are supplied the response for 100% custom response handling. Otherwise, if set to a string, this option will be treated as an ordinary file path and abide rules for gzipping / in-memory cache.\n\n+ `debug` **boolean**\n\nColored status / msg / path logging, for debugging purposes.\n\n###Caching options\n\nPass an object to the `cache` option setting. The following fields are accepted and optional:\n\n* `expire` Seconds expiration for cache keys. Keys expire after they are untouched for x-seconds. Default is `15min`.\n* `max keys` Maximum number of keys to keep in memory. Default is `Infinity`.\n* `max size` Maximum size in MB to keep in cache. Default is `100mb`.\n* `segment` Determines the threshold after which to segment a file for streaming instead of traditional writing. Default is `200kb`.\n\n```js\n  var options = {};\n  \n  options.cache = {\n    expire:5,\n    max_keys:200,\n    max_size:2,\n    segment:100\n  };\n\n  var files = lactate.static('files', options);\n\n  // Or use a string representation. Same as setting for max-age.\n  options.cache.expire = 'fifteen minutes';\n  files.set('cache', options.cache);\n```\n\n\n## License\n\nMIT\n\n",
  "_id": "lactate@0.12.2",
  "dist": {
    "shasum": "93d0ffd32501d6574a9b0ee8af3e35893637b188"
  },
  "_from": "lactate"
}
